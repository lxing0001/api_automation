import pytest
import allure
from common.http_client import HttpClient
from common.assertions import ApiAssertions
from common.logger import logger
from common.auth_manager import auth_manager


@allure.epic("GodGPT API")
@allure.feature("语音聊天功能")
class TestVoiceChatAPI:
    """GodGPT 语音聊天功能API测试类"""
    
    @pytest.fixture(autouse=True)
    def setup(self):
        """测试前置设置"""
        self.client = HttpClient("https://station-developer.aevatar.ai")
        self.assertions = ApiAssertions()
        
        # 设置默认请求头
        self.default_headers = {
            'accept': 'text/event-stream, text/event-stream',
            'accept-language': 'zh-CN,zh;q=0.9',
            'cache-control': 'no-cache',
            'content-type': 'application/json',
            'origin': 'https://godgpt.portkey.finance',
            'priority': 'u=1, i',
            'referer': 'https://godgpt.portkey.finance/',
            'sec-ch-ua': '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"macOS"',
            'sec-fetch-dest': 'empty',
            'sec-fetch-mode': 'cors',
            'sec-fetch-site': 'cross-site',
            'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
            'x-requested-with': 'XMLHttpRequest'
        }
        
        # 获取全局认证token
        self.auth_token = auth_manager.get_auth_token()
        if not self.auth_token:
            logger.warning("无法获取认证token，某些测试可能会跳过")
    
    @allure.story("语音聊天-基本功能")
    @allure.severity(allure.severity_level.CRITICAL)
    @pytest.mark.smoke
    @pytest.mark.api
    def test_voice_chat_basic(self):
        """测试语音聊天-基本功能"""
        if not self.auth_token:
            pytest.skip("无法获取认证token，跳过此测试")
            
        endpoint = "/godgptprod-client/api/godgpt/voice/chat"
        
        # 设置带认证的请求头
        auth_headers = self.default_headers.copy()
        auth_headers['authorization'] = f'Bearer {self.auth_token}'
        
        # 请求数据（使用示例sessionId）
        request_data = {
            "content": "",
            "region": "",
            "sessionId": "71d34ea5-a9d5-45eb-bfc8-fe79132c7a4d",
            "messageType": 1,
            "voiceLanguage": 0,
            "voiceDurationSeconds": 2.18
        }
        
        with allure.step("发送POST请求进行语音聊天"):
            try:
                response = self.client.post(
                    endpoint,
                    json=request_data,
                    headers=auth_headers
                )
                
                with allure.step("验证响应状态码"):
                    self.assertions.assert_status_code(response, 200)
                
                with allure.step("验证响应不为空"):
                    self.assertions.assert_not_empty(response)
                
                with allure.step("验证响应时间"):
                    self.assertions.assert_response_time(response, 30.0)
                
                with allure.step("验证响应格式"):
                    try:
                        response_text = response.text
                        assert len(response_text) > 0, "响应内容不应为空"
                        logger.info(f"语音聊天响应内容长度: {len(response_text)}")

                        # 检查是否为事件流格式
                        if 'data:' in response_text or 'event:' in response_text:
                            logger.info("响应为事件流格式")

                            # 提取每一行以 "data: " 开头的部分
                            lines = response_text.strip().splitlines()
                            data_lines = [line for line in lines if line.startswith("data:")]

                            assert len(data_lines) > 0, "事件流中未找到 data 字段"

                            for i, line in enumerate(data_lines):
                                json_part = line[len("data:"):].strip()
                                parsed = json.loads(json_part)

                                logger.debug(f"[Chunk {i}] 解析结果: {parsed}")

                                # 验证 ErrorCode == 0
                                assert "ErrorCode" in parsed, f"[Chunk {i}] 缺少 ErrorCode 字段"
                                assert parsed["ErrorCode"] == 0, f"[Chunk {i}] ErrorCode 不为 0：{parsed['ErrorCode']}"

                        else:
                            logger.info("响应为普通文本格式")
                            # 如果是普通文本，可以按需添加其他验证逻辑

                    except Exception as e:
                        logger.warning(f"响应格式验证失败: {e}")
                        pytest.fail(f"响应格式验证失败: {e}")
                        
            except Exception as e:
                if "401" in str(e) or "403" in str(e):
                    logger.error("API返回认证错误，token可能已过期")
                    pytest.fail("认证失败，测试失败")
                elif "429" in str(e):
                    logger.warning("API返回429错误（请求过于频繁），这是预期的限制")
                    pytest.skip("API请求频率限制，跳过此测试")
                else:
                    raise e
    
   
    
    @allure.story("语音聊天-带地区")
    @allure.severity(allure.severity_level.NORMAL)
    @pytest.mark.api
    def test_voice_chat_with_region(self):
        """测试语音聊天-带地区"""
        if not self.auth_token:
            pytest.skip("无法获取认证token，跳过此测试")
            
        endpoint = "/godgptprod-client/api/godgpt/voice/chat"
        
        # 设置带认证的请求头
        auth_headers = self.default_headers.copy()
        auth_headers['authorization'] = f'Bearer {self.auth_token}'
        
        # 请求数据（带地区）
        import datetime
        current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        request_data = {
            "content": f"今天天气怎么样？当前时间：{current_time}",
            "region": "北京",
            "sessionId": "71d34ea5-a9d5-45eb-bfc8-fe79132c7a4d",
            "messageType": 1,
            "voiceLanguage": 0,
            "voiceDurationSeconds": 2.5
        }
        
        with allure.step("发送POST请求进行带地区的语音聊天"):
            try:
                response = self.client.post(
                    endpoint,
                    json=request_data,
                    headers=auth_headers
                )
                
                with allure.step("验证响应状态码"):
                    self.assertions.assert_status_code(response, 200)
                
                with allure.step("验证响应不为空"):
                    self.assertions.assert_not_empty(response)
                
                with allure.step("验证响应时间"):
                    self.assertions.assert_response_time(response, 30.0)
                
                logger.info("带地区的语音聊天测试通过")
                
            except Exception as e:
                if "401" in str(e) or "403" in str(e):
                    logger.error("API返回认证错误，token可能已过期")
                    pytest.fail("认证失败，测试失败")
                elif "429" in str(e):
                    logger.warning("API返回429错误（请求过于频繁），这是预期的限制")
                    pytest.skip("API请求频率限制，跳过此测试")
                else:
                    raise e
    
   
    @allure.story("语音聊天-无效sessionId")
    @allure.severity(allure.severity_level.MINOR)
    @pytest.mark.api
    def test_voice_chat_invalid_session_id(self):
        """测试语音聊天-无效sessionId"""
        if not self.auth_token:
            pytest.skip("无法获取认证token，跳过此测试")
            
        endpoint = "/godgptprod-client/api/godgpt/voice/chat"
        
        # 设置带认证的请求头
        auth_headers = self.default_headers.copy()
        auth_headers['authorization'] = f'Bearer {self.auth_token}'
        
        # 请求数据（无效sessionId）
        import datetime
        current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        request_data = {
            "content": f"无效sessionId测试，当前时间：{current_time}",
            "region": "",
            "sessionId": "invalid-session-id",
            "messageType": 1,
            "voiceLanguage": 0,
            "voiceDurationSeconds": 2.18
        }
        
        with allure.step("发送POST请求进行无效sessionId的语音聊天"):
            try:
                response = self.client.post(
                    endpoint,
                    json=request_data,
                    headers=auth_headers
                )
                
                # 无效sessionId可能返回400或其他错误状态码
                logger.info(f"无效sessionId语音聊天响应状态码: {response.status_code}")
                
            except Exception as e:
                if "400" in str(e):
                    logger.info("预期的400错误（无效sessionId）")
                elif "401" in str(e) or "403" in str(e):
                    logger.error("API返回认证错误，token可能已过期")
                    pytest.fail("认证失败，测试失败")
                elif "429" in str(e):
                    logger.warning("API返回429错误（请求过于频繁），这是预期的限制")
                    pytest.skip("API请求频率限制，跳过此测试")
                else:
                    raise e
    
    @allure.story("语音聊天-性能测试")
    @allure.severity(allure.severity_level.NORMAL)
    @pytest.mark.slow
    @pytest.mark.api
    def test_voice_chat_performance(self):
        """测试语音聊天-性能测试"""
        if not self.auth_token:
            pytest.skip("无法获取认证token，跳过此测试")
            
        endpoint = "/godgptprod-client/api/godgpt/voice/chat"
        
        # 设置带认证的请求头
        auth_headers = self.default_headers.copy()
        auth_headers['authorization'] = f'Bearer {self.auth_token}'
        
        # 请求数据
        request_data = {
            "content": "性能测试语音消息",
            "region": "",
            "sessionId": "71d34ea5-a9d5-45eb-bfc8-fe79132c7a4d",
            "messageType": 1,
            "voiceLanguage": 0,
            "voiceDurationSeconds": 2.18
        }
        
        with allure.step("发送POST请求进行性能测试"):
            try:
                response = self.client.post(
                    endpoint,
                    json=request_data,
                    headers=auth_headers
                )
                
                with allure.step("验证响应状态码"):
                    self.assertions.assert_status_code(response, 200)
                
                with allure.step("验证响应时间不超过20秒"):
                    self.assertions.assert_response_time(response, 20.0)
                
                logger.info("语音聊天性能测试通过")
                
            except Exception as e:
                if "401" in str(e) or "403" in str(e):
                    logger.error("API返回认证错误，token可能已过期")
                    pytest.fail("认证失败，测试失败")
                elif "429" in str(e):
                    logger.warning("API返回429错误（请求过于频繁），这是预期的限制")
                    pytest.skip("API请求频率限制，跳过此测试")
                else:
                    raise e
    
 